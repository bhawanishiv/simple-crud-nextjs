{
  "openapi": "3.0.0",
  "info": {
    "title": "Simple CRUD APIs",
    "version": "0.1.0"
  },
  "paths": {
    "/api/schemas/{schemaName}/details": {
      "post": {
        "tags": ["Dynamic schema item"],
        "description": "Get paginated items based on the provided schema",
        "parameters": [
          {
            "in": "path",
            "name": "schemaName",
            "description": "Schema name (Unique name which was use while creation)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit, which results in maximum number of items per request",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Skip, required to skip some items, for pagination",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the paginated response of items with count",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "schema": {
                      "$ref": "#/components/schemas/IDynamicSchema"
                    },
                    "fields": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/IDynamicSchemaField"
                      }
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "count": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error, for any invalid input"
          },
          "404": {
            "description": "Results error if schema is not found"
          }
        }
      }
    },
    "/api/schemas/{schemaName}/fields": {
      "get": {
        "tags": ["Dynamic schema fields"],
        "description": "Get fields information along with schema",
        "parameters": [
          {
            "in": "path",
            "name": "schemaName",
            "description": "Schema name (Unique name which was use while creation)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the fields information along with schema",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "schema": {
                      "$ref": "#/components/schemas/IDynamicSchema"
                    },
                    "fields": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/IDynamicSchemaField"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error, for any invalid input"
          },
          "404": {
            "description": "Results error if schema is not found"
          }
        }
      }
    },
    "/api/schemas/{id}/fields": {
      "post": {
        "tags": ["Dynamic schema fields"],
        "description": "Create a new field for the dynamic schema",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Schema Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the created field",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/IDynamicSchemaField"
                }
              }
            }
          },
          "400": {
            "description": "Error, for any invalid input"
          },
          "404": {
            "description": "Results error if schema id is incorrect"
          }
        }
      },
      "patch": {
        "tags": ["Dynamic schema fields"],
        "description": "Update the field for the dynamic schema",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Schema Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "id",
            "description": "Field id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated field",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/IDynamicSchemaField"
                }
              }
            }
          },
          "400": {
            "description": "Error, for any invalid input"
          },
          "404": {
            "description": "Results error if schema or field id is incorrect"
          }
        }
      }
    },
    "/api/schemas/{id}": {
      "post": {
        "tags": ["Dynamic schema item"],
        "description": "Create an item based on defined schema fields",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Schema Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the created item",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Error, for any invalid input"
          },
          "404": {
            "description": "Results error if schema id is not found"
          }
        }
      },
      "patch": {
        "tags": ["Dynamic schema item"],
        "description": "Update an item based on defined schema fields",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Schema Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "id",
            "description": "Item id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated item",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Error, for any invalid input"
          },
          "404": {
            "description": "Results error if schema or item id is not found"
          }
        }
      },
      "delete": {
        "tags": ["Dynamic schema item"],
        "description": "Delete the existing item created using dynamic schema",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Schema Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "id",
            "description": "Item id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the deleted item",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Error, for any invalid input"
          },
          "404": {
            "description": "Results error if schema or item id is not found"
          }
        }
      }
    },
    "/api/schemas": {
      "get": {
        "tags": ["Schema"],
        "description": "Returns a paginated list of dynamic schemas",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Limit, which results in maximum number of items per request",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Skip, required to skip some items, for pagination",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "in": "query",
            "name": "query",
            "description": "Query, used to find matching Schema objects",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of dynamic schemas"
          }
        }
      },
      "post": {
        "tags": ["Schema"],
        "description": "Create a new dynamic schema",
        "parameters": [
          {
            "in": "body",
            "name": "title",
            "description": "title of the schema, used as a label for the schema",
            "example": "Fancy Users",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "name",
            "description": "Unique name of the schema, which shouldn't exist while creating",
            "example": "User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the newly created dynamic schema"
          },
          "400": {
            "description": "Returns error message if schema is invalid or already exists"
          }
        }
      },
      "patch": {
        "tags": ["Schema"],
        "description": "Update the existing dynamic schema",
        "parameters": [
          {
            "in": "body",
            "name": "id",
            "description": "Id of the dynamic schema",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "title",
            "description": "Title of the dynamic schema to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated values of the dynamic schema"
          },
          "400": {
            "description": "Returns error, if there is any"
          }
        }
      }
    },
    "openapi": {
      "0": "3",
      "1": ".",
      "2": "0",
      "3": ".",
      "4": "0"
    },
    "info": {
      "title": "Converted from User.swagger.yaml with typeconv",
      "version": "1",
      "x-id": "User.swagger.yaml",
      "x-comment": "Generated from src/interfaces/User.ts by core-types-json-schema (https://github.com/grantila/core-types-json-schema) on behalf of typeconv (https://github.com/grantila/typeconv)"
    }
  },
  "components": {
    "schemas": {
      "IDynamicSchema": {
        "properties": {
          "id": {
            "title": "IDynamicSchema.id",
            "type": "string"
          },
          "title": {
            "title": "IDynamicSchema.title",
            "type": "string"
          },
          "name": {
            "title": "IDynamicSchema.name",
            "type": "string"
          },
          "createdAt": {
            "title": "IDynamicSchema.createdAt",
            "type": "string"
          },
          "updatedAt": {
            "title": "IDynamicSchema.updatedAt",
            "type": "string"
          }
        },
        "required": ["id", "title", "name", "createdAt", "updatedAt"],
        "additionalProperties": false,
        "title": "IDynamicSchema",
        "type": "object"
      },
      "IDynamicSchemaFieldType": {
        "enum": [
          "number",
          "boolean",
          "text",
          "multi-text",
          "list",
          "date",
          "related"
        ],
        "title": "IDynamicSchemaFieldType",
        "type": "string"
      },
      "IDynamicSchemaRelationType": {
        "enum": ["hasOne", "hasMany"],
        "title": "IDynamicSchemaRelationType",
        "type": "string"
      },
      "IDynamicSchemaField": {
        "properties": {
          "id": {
            "title": "IDynamicSchemaField.id",
            "type": "string"
          },
          "schema": {
            "title": "IDynamicSchemaField.schema",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ]
          },
          "title": {
            "title": "IDynamicSchemaField.title",
            "type": "string"
          },
          "name": {
            "title": "IDynamicSchemaField.name",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/IDynamicSchemaFieldType",
            "title": "IDynamicSchemaField.type"
          },
          "unique": {
            "title": "IDynamicSchemaField.unique",
            "type": "boolean"
          },
          "required": {
            "title": "IDynamicSchemaField.required",
            "type": "boolean"
          },
          "default": {
            "title": "IDynamicSchemaField.default"
          },
          "relatedSchema": {
            "title": "IDynamicSchemaField.relatedSchema",
            "type": "string"
          },
          "relationType": {
            "$ref": "#/components/schemas/IDynamicSchemaRelationType",
            "title": "IDynamicSchemaField.relationType"
          },
          "createdAt": {
            "title": "IDynamicSchemaField.createdAt",
            "type": "string"
          },
          "updatedAt": {
            "title": "IDynamicSchemaField.updatedAt",
            "type": "string"
          },
          "options": {
            "items": {
              "title": "IDynamicSchemaField.options.[]",
              "type": "string"
            },
            "title": "IDynamicSchemaField.options",
            "type": "array"
          }
        },
        "required": [
          "id",
          "schema",
          "title",
          "name",
          "type",
          "createdAt",
          "updatedAt"
        ],
        "additionalProperties": false,
        "title": "IDynamicSchemaField",
        "type": "object"
      },
      "IUser": {
        "properties": {
          "uid": {
            "title": "IUser.uid",
            "type": "string"
          },
          "firstName": {
            "title": "IUser.firstName",
            "type": "string"
          },
          "lastName": {
            "title": "IUser.lastName",
            "type": "string"
          },
          "email": {
            "title": "IUser.email",
            "type": "string"
          },
          "createdAt": {
            "title": "IUser.createdAt",
            "type": "string"
          },
          "updatedAt": {
            "title": "IUser.updatedAt",
            "type": "string"
          },
          "role": {
            "enum": ["ADMIN", "USER"],
            "title": "IUser.role",
            "type": "string"
          }
        },
        "required": [
          "uid",
          "firstName",
          "lastName",
          "email",
          "createdAt",
          "updatedAt",
          "role"
        ],
        "additionalProperties": false,
        "title": "IUser",
        "type": "object"
      }
    }
  },
  "tags": []
}
